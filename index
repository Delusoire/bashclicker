#!/bin/bash

dev=${1-/dev/input/event5}

hex-endian-swap () {
  ((s=$1 + $1 % 2))
  h=`printf "%0${s}x"`

  while ((s > 0)); do
    p+=${t:s-=2:2}
  done

  echo "$p"
}

event-pack () {
  tv_sec=`  date +%-s | hex-endian-swap 16`
  tv_usec=` date +%-N | rg '^0+' -r '' | hex-endian-swap 16`
  type=`    hex-endian-swap 4 <<< "$1"`
  code=`    hex-endian-swap 4 <<< "$2"`
  value=`   hex-endian-swap 8 <<< "$3"`
}

event-unpack () {
  tv_sec=`  cut -c 01-16 | hex-endian-swap 16`
  tv_usec=` cut -c 17-32 | hex-endian-swap 16`
  type=`    cut -c 33-40 | hex-endian-swap 4`
  code=`    cut -c 41-44 | hex-endian-swap 4`
  value=`   cut -c 45-48 | hex-endian-swap 8`
}

event-queue () {
  # event-queue type code value
  event-pack $*
  buf+=$tv_sec$tv_usec$type$code$value
}

event-send () {
  echo "$buf"                             |\
    # UnHexify
    xxd -r -p                             |\
    # Inject
    sudo tee "$dev" >/dev/null

  buf=
}

emulate-key () {
  event-queue 0 0    0       # EV_SYN SYN_REPORT
  event-queue 1 "$1" "$2"    # EV_KEY KEY/BTN UP/DOWN
  event-queue 4 4    0x90001 # EV_MSC MSC_SCAN
  event-send
}

emulate-keydown () {
  emulate-key "$1" 1
}

emulate-keyup () {
  emulate-key "$1" 0
}

emulate-keypress () {
  # send-keypress keycode duration
  emulate-keydown "$1"
  sleep           "$2"
  emulate-keyup   "$1"
}

stdio-unbuffer () {
  script -q -c "$*" /dev/null
}

date-now () {
  date +%s%N | cut -c 1-13
}

random () {
  echo "$(($1 + ($RANDOM % ($2 - $1))))"
}

clicks=()
cwd=`dirname "$0"`
lmb=`event-pack 1 0x110 0 | cut -c 33-`

stdio-unbuffer sudo xxd -p -c 24 "$dev" |\
while true; do
  test ! `cat "$cwd"/state` && continue

  now=`date-now`
  read -t 0 && {
    read event
    event-unpack <<< "$event"

    rg -q "^$lmb$" <<< "$value$code$type" && {
      ((skip--)) && continue || ((skip=0))
    
      S=()
      for k in "${!clicks[@]}"; do
        S+=($((now - clicks[k])))
        ((S[-1] > 1000)) && unset "clicks[$k]"
      done
      clicks=("$now" ${clicks[@]})

      ((${#S[@]} > 1)) && {
        ((n=0, m=0, p=0, B=1000 * S[-1] * S[-1]))
        for s in "${S[@]}"; do
          ((m += i = (B / (s * s)), \
            n += i * (s - p), \
            p = s))
        done

        ((d=`random 8 12` * n / (20 * m)))
        ((d < 369)) && (((d+=now) < delay || ! delay)) && delay=d
      }
    }
  }

  ((delay && delay < now)) && {
    ((delay=0, skip++))
    emulate-keypress 0x110 0 # Left Mouse Button
  }
done
